{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Question","questions","this","props","i","question","React","Component","Answers","Object","keys","slice","map","el","key","toUpperCase","name","type","value","MoneyWon","money","className","form","createRef","App","state","end","methods","checkAnswer","e","preventDefault","result","current","forEach","checked","answer","setState","ref","onSubmit","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+hOAIMA,E,uKAEF,OACE,+BAAKC,EAAUC,KAAKC,MAAMC,GAAGC,SAA7B,S,GAHiBC,IAAMC,WAQvBC,E,uKACM,IAAD,OACP,OACEC,OAAOC,KAAKT,EAAUC,KAAKC,MAAMC,IAAIO,MAAM,EAAG,GAAGC,KAAI,SAAAC,GACnD,OACE,2BAAOC,IAAK,YAAc,EAAKX,MAAMC,EAAI,WAAaS,GACnDA,EAAGE,cADN,IAEE,2BACEC,KAAK,SACLC,KAAK,QACLC,MAAOL,IAERZ,EAAU,EAAKE,MAAMC,GAAGS,W,GAZfP,IAAMC,WAoBtBY,E,uKACM,IAAD,OACP,OACEV,OAAOC,KAAKT,GAAWW,KAAI,SAAAC,GACzB,OACE,yBACEC,IAAKb,EAAUY,GAAIO,MAAQ,IAAM,EAAKjB,MAAMC,EAC5CiB,UAAYpB,EAAUY,GAAIO,OAAS,EAAKjB,MAAMiB,MAAQ,MAAQnB,EAAUY,GAAIO,QAA6B,EAAnB,EAAKjB,MAAMiB,MAAY,UAAY,IAF3H,KAIMnB,EAAUY,GAAIO,c,GATPd,IAAMC,WAiBvBe,EAAOhB,IAAMiB,YAwEJC,E,kDArEb,WAAYrB,GAAQ,IAAD,8BACjB,cAAMA,IACDsB,MAAQ,CACXrB,EAAG,EACHsB,KAAK,EACLN,MAAO,GAET,EAAKO,QAAU,CACbC,YAAa,SAACC,GACZA,EAAEC,iBAEF,IAAIC,GAAS,EACbtB,OAAOC,KAAKY,EAAKU,SAASC,SAAQ,SAAApB,GAC5BS,EAAKU,QAAQnB,GAAIqB,SAChBZ,EAAKU,QAAQnB,GAAIK,QAAUjB,EAAU,EAAKwB,MAAMrB,GAAG+B,SACtDJ,GAAU,MAGVA,EACF,EAAKK,UAAS,SAACX,GACb,MAAO,CACLrB,EAAGqB,EAAMrB,EAAI,EACbgB,MAAOK,EAAML,MAAsB,EAAdK,EAAML,MAAY,QAI3C,EAAKgB,UAAS,WACZ,MAAO,CAACV,KAAK,QA3BJ,E,qDAmCjB,OACE,yBAAKL,UAAU,OACXnB,KAAKuB,MAAMC,IAET,4CAEF,yBAAKL,UAAU,QACb,kBAAC,EAAD,CACEP,IAAKZ,KAAKuB,MAAMrB,EAChBA,EAAGF,KAAKuB,MAAMrB,IAEhB,0BACEiC,IAAKf,EACLgB,SAAUpC,KAAKyB,QAAQC,aAEvB,kBAAC,EAAD,CAASxB,EAAGF,KAAKuB,MAAMrB,IACvB,2BACEa,KAAM,SACNC,MAAO,YAGX,yBAAKG,UAAU,sBACb,kBAAC,EAAD,CACEP,IAAKZ,KAAKuB,MAAMrB,EAChBgB,MAAOlB,KAAKuB,MAAML,OAAS,a,GA5DzBd,IAAMC,WCvCJgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.264bb3b6.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {default as questions } from './config.json'\n\nclass Question extends React.Component {\n  render() {\n    return (\n      <p> {questions[this.props.i].question} </p>\n    )\n  }\n}\n\nclass Answers extends React.Component {\n  render() {\n    return (\n      Object.keys(questions[this.props.i]).slice(1, 5).map(el => {\n        return (\n          <label key={\"question \" + this.props.i + \" answer \" + el}>\n            {el.toUpperCase()}:\n            <input\n              name=\"answer\"\n              type=\"radio\"\n              value={el}\n            />\n            {questions[this.props.i][el]}\n          </label>\n        )\n      })\n    )\n  }\n}\n\nclass MoneyWon extends React.Component {\n  render() {\n    return (\n      Object.keys(questions).map(el => {\n        return (\n          <div\n            key={questions[el].money + ' ' + this.props.i}\n            className={ questions[el].money <= this.props.money ? 'won' : questions[el].money === this.props.money * 2 ? 'current' : ''}\n          >\n            $ { questions[el].money }\n          </div>\n        )\n      })\n    )\n  }\n}\n\nconst form = React.createRef()\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      i: 1,\n      end: false,\n      money: 0\n    };\n    this.methods = {\n      checkAnswer: (e) => {\n        e.preventDefault()\n\n        let result = false;\n        Object.keys(form.current).forEach(el => {\n          if (form.current[el].checked\n            && form.current[el].value === questions[this.state.i].answer) {\n            result =  true\n          }\n        })\n        if (result) {\n          this.setState((state) => {\n            return {\n              i: state.i + 1,\n              money: state.money ? state.money * 2 : 500\n            }\n          })\n        } else {\n          this.setState(() => {\n            return {end: true}\n          })\n        }\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        { this.state.end\n          ?\n            <div> Game over </div>\n          :\n          <div className=\"Game\">\n            <Question\n              key={this.state.i}\n              i={this.state.i}\n            />\n            <form\n              ref={form}\n              onSubmit={this.methods.checkAnswer}\n            >\n              <Answers i={this.state.i} />\n              <input\n                type={\"submit\"}\n                value={\"submit\"}\n              />\n            </form>\n            <div className=\"MoneyWon_container\">\n              <MoneyWon\n                key={this.state.i}\n                money={this.state.money || 250}\n              />\n            </div>\n          </div>\n        }\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}